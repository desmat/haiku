'use client'

import moment from "moment";
import { useEffect, useState } from "react";
import { Haiku } from "@/types/Haiku";
import { USAGE_LIMIT } from "@/types/Usage";
import { capitalize } from "@/utils/format";
import { User } from "@/types/User";
import { StyledLayers } from "./StyledLayers";
import { GenerateIcon } from "./Nav";
import trackEvent from "@/utils/trackEvent";
import useAlert from "../_hooks/alert";

export default function HaikuPoem({
  user,
  mode,
  haiku,
  solved,
  styles,
  altStyles,
  regenerate,
  refresh,
}: {
  user: User,
  mode: string,
  haiku: Haiku,
  solved: boolean,
  styles: any[],
  altStyles?: any[],
  regenerate?: any,
  refresh?: any
}) {
  // console.log('>> app._components.HaikuPoem.render()', { mode, haiku });
  const isHaikudleMode = mode == "haikudle";
  const maxHaikuTheme = 18;
  const [alert] = useAlert((state: any) => [state.plain]);

  // console.log('>> app._components.HaikuPage.HaikuPoem.render()', { poem, solved });



  const upperCaseFirstLetter = (s: string) => {
    if (!s || s.length == 0) return "";
    return s.substring(0, 1).toUpperCase() + s.substring(1);
  }

  const [pop, setPop] = useState(false);

  // console.log('>> app._components.HaikuPage.render()', { inProgress });

  const doPop = () => {
    setPop(true);
    setTimeout(() => setPop(false), 100);
  }

  const haikuTitleAndAuthorTag = [
    `"${capitalize(haiku.theme)}", `,
    `generated by ${isHaikudleMode ? "haikudle.art" : "haiku.desmat.ca"} (${moment(haiku.createdAt).format("YYYY")})`
  ];

  const handleClickHaiku = (e: any) => {
    if (mode == "showcase") {
      return refresh && refresh(e);
    }

    const haikuToCopy = haiku.poem
      .map((line: string, i: number) => upperCaseFirstLetter(line))
      .join("\n")
      + `\n—${haikuTitleAndAuthorTag.join("")}\n`;

    doPop();
    // console.log('>> app._components.HaikuPage.handleClickHaiku()', { haikuToCopy });
    navigator.clipboard.writeText(haikuToCopy);

    alert(`Haiku poem copied to clipboard`, { closeDelay: 750 });

    trackEvent("haiku-copied", {
      userId: user.id,
      id: haiku.id,
    });    
  }

  useEffect(() => {
    if (solved) {
      doPop();
    }
  }, [solved]);

  return (
    <div>
      <div
        className="_bg-purple-200 flex flex-col transition-all"
        onClick={handleClickHaiku}
        title={mode == "showcase" ? "Refresh" : "Copy to clipboard"}
        style={{
          filter: `${pop ? `drop-shadow(0px 0px 32px ${haiku?.bgColor})` : ""}`,
          cursor: mode == "showcase" ? "pointer" : "copy"
        }}
      >
        {haiku.poem.map((line: string, i: number) => (
          <StyledLayers key={i} styles={styles}>
            <div className="m-[0rem] transition-all">
              {upperCaseFirstLetter(line)}
            </div>
          </StyledLayers>
        ))}
      </div>
      <div
        className="relative md:text-[14pt] sm:text-[10pt] text-[8pt] md:mt-[-0.3rem] sm:mt-[-0.2rem] mt-[-0.1rem]"
        style={{
          // background: "pink",
          height: mode == "haikudle"
            ? ""
            : haiku.theme?.length > maxHaikuTheme
              ? "2.6rem"
              : "1.3rem"
        }}
      >
        <div className="absolute w-max flex flex-row">
          <div
            className="transition-all"
            onClick={handleClickHaiku}
            title={mode == "showcase" ? "Refresh" : "Copy to clipboard"}
            style={{
              cursor: mode == "showcase" ? "pointer" : "copy"
            }}
          >
            <StyledLayers styles={styles}>
              <span
                dangerouslySetInnerHTML={{ __html: `—${haikuTitleAndAuthorTag.join(haiku.theme?.length > maxHaikuTheme ? "<br/>&nbsp;" : "")}` }}
              >
              </span>
            </StyledLayers>
          </div>
          {regenerate && (user?.isAdmin || haiku.createdBy == user?.id) &&
            <div
              className="mt-auto md:pt-[0.1rem] sm:pt-[0.2rem] mdpb-[0.4rem] sm:pb-[0.3rem] pb-[0.2rem] md:pl-[0.9rem] sm:pl-[0.7rem] pl-[0.5rem]"
              title="Regenerate this haiku with the same theme"
            >
              {!user?.isAdmin && user.usage?.haikusRegenerated >= USAGE_LIMIT.DAILY_REGENERATE_HAIKU &&
                <span className="opacity-30" title="Exceeded daily limit: try again later">
                  <StyledLayers styles={altStyles || []}>
                    <GenerateIcon sizeOverwrite="h-4 w-4 md:h-6 md:w-6" />
                  </StyledLayers>
                </span>
              }
              {(user?.isAdmin || user.usage?.haikusRegenerated < USAGE_LIMIT.DAILY_REGENERATE_HAIKU) &&
                <StyledLayers styles={altStyles || []}>
                  <GenerateIcon onClick={regenerate} sizeOverwrite="h-4 w-4 md:h-6 md:w-6" />
                </StyledLayers>
              }
            </div>
          }
        </div>
      </div>
    </div>
  )
}

